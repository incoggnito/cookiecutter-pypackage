[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.open_source_license }}"

readme = "README.md"

repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}"

homepage = "https://{{ cookiecutter.project_slug | replace('_', '-'') }}.readthedocs.io."


packages = [{ include = "{{ cookiecutter.project_slug }}", from = "src" }]

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]
[tool.poetry.dependencies]
python = "^3.7"
cookiecutter = "^1.7.2"
lice = "^0.6"

[tool.poetry.dev-dependencies]
{% if cookiecutter.use_pytest == "y" -%}
pytest-cov = "^2.6.0"{% endif %}
bump2version = "^0.5.0"
black = "^20.8b1"
pip = "^21.0.1"
wheel = "^0.36.2"
watchdog = "^1.0.2"
tox = "^3.21.3"
coverage = "^5.4"
Sphinx = "^3.4.3"
twine = "^3.3.0"
pytest = "^6.2.2"
pytest-runner = "^5.2"
setuptools = "^52.0.0"
isort = "^5.7.0"
mypy = "^0.800"
bandit = "^1.7.0"
safety = "^1.10.3"
pytest = "^6.2.1"
pylint = "^2.5.3"
jupyter-console = "6.2.0"

[tool.black]
line-length = {{ cookiecutter.max_line_length }}

[tool.isort]
line_length = {{ cookiecutter.max_line_length }}
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true

[tool.pylint.message_control]
disable = ["import-error", "bad-continuation", "logging-fstring-interpolation"]

[tool.pylint.format]
max-line-length = {{ cookiecutter.max_line_length }}
good-names = ["logger"]

[tool.mypy]
ignore_missing_imports = true # not supported yet

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q" # test summary for (a)ll except passed
testpaths = ["tests"]
log_cli = true
log_cli_level = "WARNING"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = black, isort, pylint, mypy, py36, py37, py38, py39, coverage-report, docs

[testenv:black]
deps = black
black --diff src/
black --check src/skip_install = true
commands = 

[testenv:isort]
deps = isort>5
isort --diff src/
isort --check-only src/skip_install = true
commands = 

[testenv:pylint]
deps = pylint
commands = pylint src/skip_install = true

[testenv:mypy]
deps = mypy
commands = mypy --ignore-missing-imports src/skip_install = true

[testenv]
whitelist_externals = poetry
{% if cookiecutter.use_pytest == "y" -%}
deps = pytest-cov
;If you want to make tox run the tests with the same versions, use poetry 
;to install the dependencies 
poetry install -v
poetry run pytest --cov=src/{{ cookiecutter.project_slug }} tests/
{% else %}
commands = poetry run python -m test
{%- endif %}skip_install = true
setenv = 
PYTHONPATH = { toxinidir  }
commands = 

[testenv:coverage-report]
coverage>=5
- coverage combine
coverage reportskip_install = true
deps = 
toml
commands = 

[testenv:docs]
extras = docs
changedir = docs
sphinx-build -b linkcheck . _build
sphinx-build -b dummy . _build
"""commands = 

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.project_slug }}"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]
